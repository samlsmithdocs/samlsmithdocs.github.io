{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SAMLSmith","text":"<p>An officially unofficial guide to learning and using the SAMLSmith SAML response forging tool, mostly written in passive tense.</p>"},{"location":"#overview","title":"Overview","text":"<p>SAMLSmith is a multipurpose SAML response forging tool written in C#. It is designed to allow you to forge/spoof a SAML response that would have been generated by an identity provider (IdP), sent to an application, referred to as a service provider (SP) in SAML.</p> <p>If you can forge a SAML response, you can effectively act as the identity provider, and gain access to the application as the target user.</p> <p>SAML response forging does have one big prerequisite - the ability to obtain the private key. In some instances, depending on how the SAML SP is configured, adding a new signing key-pair may work, however, you still need the ability to access the signing key.</p> <p>There are cases of finding private key material lying around as PKCS#12 archives, .pfx files - think file shares and the such, and a text file or CSV with the associated password(s). These would be the cases where, if any of those key-pairs are used for SAML response signing, that you could leverage them to forge a SAML response. In all the cloud Identity-as-a-service (IDaaS) platforms we have encountered, this is the case. That is, we have not seen an IDaaS that permitted exporting of the private signing key.</p> <p>Alternatively, specific to \"on-prem\" systems like Active Directory Federation Services (AD FS), the private key material can be extracted from the system. AD FS has been a particular area of focus and research, particularly as it was a post-breach point of compromise during the Solorigate incident.</p> <p>Full details of other research and tools that we know of can be found in Tools and Research.</p> <p>The purpose of this guide is to help you understand SAML response forging, as well as how to perform it. Further, the guide contains some basic information about difference mechanisms of SAML and how they can, or cannot, defend against response forging.</p> <p>SAMLSmith must be compiled before use.</p> <p>If you believe something is missing that should be included in any part of this, have suggestions, edits, etc. please let us know by opening an issue on the docs.</p> <p>If you are concerned with something regarding the code itself, suggestions, bugs, etc. please let us know by opening an issue on the SAMLSmith repo.</p>"},{"location":"#docs-overview","title":"Docs Overview","text":""},{"location":"#using-samlsmith","title":"Using SAMLSmith","text":"<p>For help getting started with SAMLSmith.</p>"},{"location":"#saml-dictionary","title":"SAML Dictionary","text":"<p>A dictionary of common SAML terminology and it's meaning.</p>"},{"location":"#mechanics-of-saml","title":"Mechanics of SAML","text":"<p>Details on how SAML functions including flow diagrams.</p>"},{"location":"#identity-providers","title":"Identity Providers","text":"<p>Information on identity providers relating to SAML response forging.</p>"},{"location":"#defense-and-detection","title":"Defense and Detection","text":"<p>What can be done for mitigation and detection of SAML response forging.</p>"},{"location":"#other-tools-and-research","title":"Other Tools and Research","text":"<p>Information regarding other research and tools relating to SAML response forging.</p>"},{"location":"defense/","title":"Defense and Detection","text":"<p>This talks about this stuff</p>"},{"location":"dictionary/","title":"SAML Dictionary","text":""},{"location":"identityproviders/","title":"Identity Providers","text":"<p>Not every identity provider is susceptible to resposne forging. And even those that are may require a different level of work to obtain the private key material needed for response forging.</p> <p>Note that the ability to forge a SAML response from a specific identity provider does not make a statement about the overall security posture of the identity provider. As signing key material can be left \"laying around\" by administrators, finding the signing key material does not indicate that there is anything inherently insecure about the identity provider itself.</p> <p>At the core of it, for each identity provider you want to forge a response for, the identity provider must either:</p> <ul> <li>Offer a way to export the private key used for signing.</li> <li>Offer a way to import an external private key for signing.</li> </ul> <p>This document provides information on the following types of identity providers:</p> <ul> <li>Those where response forging has been tested with SAMLSmith.</li> <li>Those whose documentation shows that a it should be possible but have not been tested.</li> <li>Those whose documentation shows that it should not be possible to forge a SAML response.</li> </ul>"},{"location":"identityproviders/#samlsmith-tested","title":"SAMLSmith Tested","text":"<p>The following identity providers have had a response successfully forged by SAMLSmith</p>"},{"location":"identityproviders/#microsoft-entra-id","title":"Microsoft Entra ID","text":"<p>https://learn.microsoft.com/en-us/entra/identity/</p>"},{"location":"identityproviders/#pingidentity-pingone-for-workforce","title":"PingIdentity PingOne for Workforce","text":"<p>https://docs.pingidentity.com/pingone/release_notes/index.html</p>"},{"location":"identityproviders/#microsoft-active-directory-federation-services-ad-fs","title":"Microsoft Active Directory Federation Services (AD FS)","text":"<p>https://learn.microsoft.com/en-us/windows-server/identity/ad-fs/ad-fs-overview</p>"},{"location":"identityproviders/#jumpcloud","title":"Jumpcloud","text":"<p>https://jumpcloud.com/support/get-started</p>"},{"location":"identityproviders/#should-work-but-not-tested","title":"Should work but not tested","text":""},{"location":"identityproviders/#one-identity-onelogin","title":"One Identity OneLogin","text":"<p>https://onelogin.service-now.com/support?id=kb_view2</p> <p>According to the OneLogin documentation, support must set a flag on a OneLogin directory to permit the ability to upload a .pfx file for SAML response signing.</p> <p>Importing Third-Party Certificates for SAML Signing</p> <p>In our demo environment used for exploratory testing, this was not enabled.</p>"},{"location":"identityproviders/#not-possible-as-far-as-we-know","title":"Not possible (as far as we know)","text":""},{"location":"identityproviders/#google-cloud-iam","title":"Google Cloud IAM","text":"<p>Google Cloud IAM provides the ability to roll certificates, but does not appear to offer the ability to import an external private key for signing.</p>"},{"location":"identityproviders/#okta","title":"Okta","text":"<p>Okta only supports an exteral keypair through the use of a CSR. Therefore, Okta is generating and holding the private key at all times. It is not possible to export the keypair through Okta APIs.</p> <p>Okta Developer docs</p> <p>Sign the Okta certificate with your own CA</p>"},{"location":"saml/","title":"Mechanics of SAML","text":""},{"location":"tools/","title":"Tools and Research","text":"<p>Other tools and research related to SAML response forging.</p> <p>This list is probably not complete; if you feel something is missing here please let us know by opening an issue on the docs.</p> <p>Thank you to Dr. Nestori Synnimaa (@DrAzureAD) in particular who outlines a lot of the history in his talk Eight ways to compromise AD FS certificates.</p>"},{"location":"tools/#tools","title":"Tools","text":""},{"location":"tools/#adfsdump","title":"ADFSDump","text":"<p>Doug Bienstock</p> <p>ADFSDump is a C# tool that can be used to extract the signing key material from an ADF FS environment needed to forge a SAML response. Much appreciation to Doug as the code for ADFSDump is integrated into SAMLSmith for the same purposes.</p>"},{"location":"tools/#adfspoof","title":"ADFSpoof","text":"<p>Doug Bienstock</p> <p>ADFSpoof is a python tool that will generate a signing key pair as a PKCS#12 archive from the data extracted by ADFSDump. It also will forge a SAML 1.1 response for Entra ID federated to AD FS (marked as o365 in the tool), Dropbox SAML 2.0 and generic SAML2 response.</p>"},{"location":"tools/#shimit","title":"shimit","text":"<p>Shak Reiner</p> <p>shimit is a python tool written to perform a SAML response forging attack. The tool's mission is written as a general purpose response forging tool, but the version released has a focus on SAML response forging from AD FS with a target SP of AWS.</p>"},{"location":"tools/#aadinternals","title":"AADInternals","text":"<p>Nestori Synnimaa</p> <p>AADInternals is a PowerShell Swiss army knife for Entra ID. Included in AADInternals are functions that allow for the extraction of the key material from an AD FS environment to forge a SAML response, as well as forge a SAML response for Entra ID (Office 365 in the tool).</p>"},{"location":"tools/#whiskeysaml-and-friends","title":"WhiskeySAML and Friends","text":"<p>Anthony Larcher-Gore, Kam Talebzadeh, Nestori Syynimaa</p> <p>WhiskeySAML and Friends is a framework and proof-of-concept for a Golden SAML attack with a slick web interface and a remote AD FS configuration extraction.</p>"},{"location":"tools/#saml-raider","title":"SAML Raider","text":"<p>Roland Bischofberger and Emanuel Duss</p> <p>SAML Raider is a Burp Suite extension for manipulation of SAML messages and managing certificates.</p>"},{"location":"tools/#saml-decoder-parser","title":"SAML Decoder &amp; Parser","text":"<p>Scotty Brady</p> <p>A web-based SAML message decoder and parser.</p>"},{"location":"tools/#saml-decoder","title":"SAML Decoder","text":"<p>Another web-based SAML decoder and parser.</p>"},{"location":"tools/#saml-developer-tools","title":"SAML Developer Tools","text":"<p>A collection of tools and resources for SAML collected by onelogin.</p>"},{"location":"tools/#research","title":"Research","text":""},{"location":"tools/#nestori-synnimaa","title":"Nestori Synnimaa","text":"<p>Security vulnerability in Azure AD &amp; Office 365 identity federation</p> <p>Exporting AD FS certificates revisited: Tactics, Techniques and Procedures</p>"},{"location":"tools/#roberto-rodriguez","title":"Roberto Rodriguez","text":"<p>Active Directory Federation Services (ADFS) Distributed Key Manager (DKM) Keys</p>"},{"location":"tools/#ned-pyle","title":"Ned Pyle","text":"<p>AD FS 2.0 Claims Rule Language Primer</p>"},{"location":"tools/#shak-reiner","title":"Shak Reiner","text":"<p>Golden SAML: Newly Discovered Attack Technique Forges Authentication to Cloud Apps</p>"},{"location":"tools/#doug-bienstock","title":"Doug Bienstock","text":"<p>Abusing AD FS Replication: Stealing AD FS Secrets Over the Network</p>"},{"location":"tools/#jem-jensen","title":"Jem Jensen","text":"<p>Attacking SSO: Common SAML Vulnerabilities and Ways to Find them</p>"},{"location":"tools/#eric-woodruff","title":"Eric Woodruff","text":"<p>Meet Silver SAML: Golden SAML in the Cloud</p>"},{"location":"tools/#tomer-nahum","title":"Tomer Nahum","text":"<p>Meet Silver SAML: Golden SAML in the Cloud</p>"},{"location":"tools/#other","title":"Other","text":"<p>Detection and Hunting of Golden SAML Attack</p> <p>OWASP SAML Security Cheat Sheet</p> <p>Compile7 SAML Docs Security Best Practices</p>"},{"location":"use/","title":"Using SAMLSmith","text":"<p>In order to successfully test SAMLSmith and SAML response forging, you'll need the following:</p> <ul> <li>An identity provider that supports import of signing certificates.</li> <li>A PKCS#12 archive (or sometimes a PEM) that contains the public and private key pair.</li> <li>A service provider (application) to test with.</li> </ul> <p>Read on for more details on all three prerequisites.</p> <p>If you feel a bit lost reading this, you should check out the Mechanics of SAML and SAML Dictionary first.</p>"},{"location":"use/#big-warning-do-not-skip","title":"BIG WARNING - DO NOT SKIP","text":"<p>DO NOT TEST THIS IN A PRODUCTION ENVIRONMENT.</p> <p>DO NOT TEST THIS AGAINST A PRODUCTION APPLICATION.</p> <p>DO NOT REPLACE A SIGNING CERTIFICATE IN A PRODUCTION SYSTEM.</p> <p>DO NOT EXTRACT SIGNING KEY MATERIAL FROM A PRODUCTION SYSTEM.</p> <p>DO NOT ADD A SIGNING CERTIFICATE IN A PRODUCTION SYSTEM.</p> <p>DO NOT REMOVE A SIGNING CERTIFICATE IN A PRODUCTION SYSTEM.</p> <p>DO NOT MESS WITH SAML CONFIGURATION SETTINGS IN A PRODUCTION SYSTEM.</p> <p>DO NOT TEST WITH PRODUCTION SIGNING KEY MATERIAL.</p> <p>All that being said. Seriously. Do not try this stuff against prod. There are some BIG CONCERNS:</p> <ul> <li>Modifying the SAML configuration on the identity provider (IdP) or service provider (SP) side, not documenting the changes, and breaking things. This is how outages happen.</li> <li>Modifying the SAML signing certificate on the identity provider (IdP) or service provider (SP) side, something not going right, and breaking things. This is also how outages happen.</li> <li>Exposing the signing key material, in particular the private key. This is how actual breaches happen.</li> </ul>"},{"location":"use/#prerequisites","title":"Prerequisites","text":""},{"location":"use/#samlsmith","title":"SAMLSmith","text":"<p>You'll need to download and compile SAMLSmith from the SAMLSmith repo.</p> <p>We do not provide a compiled version of the tool.</p>"},{"location":"use/#identity-provider","title":"Identity Provider","text":"<p>There are a lot of options for identity providers out there. The only thing that is important here is that you choose one that permits the import of either a PKCS#12 (.pfx) or PEM files.</p> <p>For available options, including those that have been tested against SAMLSmith, see Identity Providers.</p> <p>All identity providers also have different dependencies and/or configuration required before they are likely capable of being used for federated authentication with SAML. If you skip any steps or dependencies it's likely you won't get very far.</p> <p>In theory, you don't really need an identity provider. The service provider is going to request a metadata XML and/or configuration from the identity provider, but considering that response forging is effectively out-of-band from the identity provider, items such as the Entity ID, Issuer, etc. can just be made up. This would easy especially with service providers that support IdP-initiated sign-in. Note that some service providers might try to reach out to URL's provided, so your mileage may vary depending on the service provider.</p> <p>For most real-world impact though, using an identity provider is beneficial because it provides a connection to real-world systems - if you are using Entra ID and then show a forged response that mirrors that of the actual Entra tenant in question, it hits that much harder.</p>"},{"location":"use/#signing-certificate","title":"Signing Certificate","text":"<p>It's generally easier to generate a self-signed certificate and then import it into a compatible identity provider, than to extract the private key material from ones that may permit it.</p> <p>If you are specifically researching AD FS, then you may want to try and extract the material from that environment for forging, using a tool like ADFSDump.</p> <p>AD FS does support the import of an externally generated signing certificate.</p> <p>If you are more interested in other response forging research, then use a self-signed certificate.</p>"},{"location":"use/#generating-with-powershell","title":"Generating with PowerShell","text":"<pre><code>$cert = New-SelfSignedCertificate \u2013Subject &lt;samlcertname&gt; -CertStoreLocation Cert:\\CurrentUser\\My\n$pwd = Get-Credential\nExport-PfxCertificate -Cert $cert -FilePath &lt;C:\\path\\samlcertname.pfx&gt; -Password $pwd.Password\n</code></pre> <p>Note that the Subject name does not have to be a fully qualified domain name or relevant to the service provider or identity provider name.</p>"},{"location":"use/#generating-with-openssl","title":"Generating with openssl","text":""},{"location":"use/#service-provider","title":"Service Provider","text":"<p>Any application that supports SAML 2.0 is a service provider.</p> <p>In theory, you don't really need a service provider if you simply want to test generating a SAML response and examining it. But if you want to see what response forging looks like end-to-end, then you should setup a service provider.</p> <p>There are generally a few different routes available:</p>"},{"location":"use/#developer-environment-for-a-commercial-application","title":"Developer environment for a commercial application","text":"<p>Some large SaaS companies, like Salesforce and ServiceNow, offer developer programs which give you a developer instance of their platform. In these scenarios, you can federate your developer instance of their application to your identity provider.</p> <p>The benefit here is that this provides the most real-world simulation, and also the most shock and awe. If you are trying to convince someone that SAML response forging is a real thing, then this showcases it against a real application.</p> <p>If you go this route please be respectful of the developer programs and guidelines. Developer programs, when abused, can be shutdown or restricted by the company that is offering it - just take a look at the Microsoft 365 Developer Program.</p> <p>Some developer programs may have activity monitors and will time-limit your environment if not active in it.</p>"},{"location":"use/#test-saml-application","title":"Test SAML application","text":"<p>There is a mix of test SAML applications out there that will consume a SAML response, but the application itself exits for nothing other than testing and configuring SAML.</p> <p>These are relatively easy to setup, and some will provide useful information for displaying the information within the SAML response - many of these are written to help ITPros debug SAML claim rules before putting them into production.</p> <p>These have a little less of a wow factor because they are not real applications with real users and real data. They generally will accept any response, as long as it's a valid response.</p> <p>The following are some example sites. Note that we have not tested these, so your mileage may vary.</p> <p>RSA Test Service Provider</p> <p>Claims X-Ray</p>"},{"location":"use/#buildrun-your-own-service-provider","title":"Build/run your own service provider","text":"<p>The last option is to build or run your own service provider and integrate it with your identity provider.</p> <p>TestShib has some resources on setting up an instance of Shibboleth as a service provider.</p> <p>Note that Shibboleth and Entra ID can be a bit finicky in configuring to play nice together.</p>"},{"location":"use/#getting-started","title":"Getting started","text":"<p>Once you have your prerequisites complete, it's time to start forging responses.</p> <p>The tool supports command line arguments for feeding SAML attribute data or the ability to feed it a JSON file that contains the data.</p> <p>Generally speaking, it's easier to provide it a JSON file with the necessary data; it's how we've primarily used it.</p>"},{"location":"use/#json-file-format","title":"JSON File Format","text":"<p>The JSON file has the following structure:</p> <pre><code>{\n    \"pfxPath\": \"C:\\\\certs\\\\signing.pfx\",\n    \"pfxPassword\": \"password123\",\n    \"idpid\": \"https://sts.company.com/adfs/services/trust\",\n    \"recipient\": \"https://app.company.com/sso/saml\",\n    \"subjectnameid\": \"user@company.com\",\n    \"audience\": \"https://app.company.com\",\n    \"inResponseTo\": \"optional_response_id\",\n    \"attributes\": {\n        \"http://schemas.microsoft.com/identity/claims/tenantid\": \"tenant-guid\",\n        \"http://schemas.microsoft.com/identity/claims/objectidentifier\": \"user-guid\",\n        \"http://schemas.microsoft.com/identity/claims/displayname\": \"John Doe\",\n        \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\": \"user@company.com\",\n        \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\": \"John Doe\"\n    }\n}\n</code></pre>"}]}